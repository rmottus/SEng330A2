// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineList.proto

#ifndef PROTOBUF_MachineList_2eproto__INCLUDED
#define PROTOBUF_MachineList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MachineList_2eproto();
void protobuf_AssignDesc_MachineList_2eproto();
void protobuf_ShutdownFile_MachineList_2eproto();

class Machine;
class MachineList;

enum Machine_CardioType {
  Machine_CardioType_TREADMILL = 1,
  Machine_CardioType_ELLIPTICAL = 2,
  Machine_CardioType_STATIONARYBIKE = 3
};
bool Machine_CardioType_IsValid(int value);
const Machine_CardioType Machine_CardioType_CardioType_MIN = Machine_CardioType_TREADMILL;
const Machine_CardioType Machine_CardioType_CardioType_MAX = Machine_CardioType_STATIONARYBIKE;
const int Machine_CardioType_CardioType_ARRAYSIZE = Machine_CardioType_CardioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Machine_CardioType_descriptor();
inline const ::std::string& Machine_CardioType_Name(Machine_CardioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Machine_CardioType_descriptor(), value);
}
inline bool Machine_CardioType_Parse(
    const ::std::string& name, Machine_CardioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Machine_CardioType>(
    Machine_CardioType_descriptor(), name, value);
}
enum Machine_WeightType {
  Machine_WeightType_BENCHPRESS = 1,
  Machine_WeightType_PREACHERCURL = 2,
  Machine_WeightType_LEGPRESS = 3
};
bool Machine_WeightType_IsValid(int value);
const Machine_WeightType Machine_WeightType_WeightType_MIN = Machine_WeightType_BENCHPRESS;
const Machine_WeightType Machine_WeightType_WeightType_MAX = Machine_WeightType_LEGPRESS;
const int Machine_WeightType_WeightType_ARRAYSIZE = Machine_WeightType_WeightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Machine_WeightType_descriptor();
inline const ::std::string& Machine_WeightType_Name(Machine_WeightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Machine_WeightType_descriptor(), value);
}
inline bool Machine_WeightType_Parse(
    const ::std::string& name, Machine_WeightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Machine_WeightType>(
    Machine_WeightType_descriptor(), name, value);
}
// ===================================================================

class Machine : public ::google::protobuf::Message {
 public:
  Machine();
  virtual ~Machine();

  Machine(const Machine& from);

  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();

  enum TypeCase {
    kCType = 3,
    kWType = 4,
    TYPE_NOT_SET = 0,
  };

  void Swap(Machine* other);

  // implements Message ----------------------------------------------

  Machine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Machine_CardioType CardioType;
  static const CardioType TREADMILL = Machine_CardioType_TREADMILL;
  static const CardioType ELLIPTICAL = Machine_CardioType_ELLIPTICAL;
  static const CardioType STATIONARYBIKE = Machine_CardioType_STATIONARYBIKE;
  static inline bool CardioType_IsValid(int value) {
    return Machine_CardioType_IsValid(value);
  }
  static const CardioType CardioType_MIN =
    Machine_CardioType_CardioType_MIN;
  static const CardioType CardioType_MAX =
    Machine_CardioType_CardioType_MAX;
  static const int CardioType_ARRAYSIZE =
    Machine_CardioType_CardioType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CardioType_descriptor() {
    return Machine_CardioType_descriptor();
  }
  static inline const ::std::string& CardioType_Name(CardioType value) {
    return Machine_CardioType_Name(value);
  }
  static inline bool CardioType_Parse(const ::std::string& name,
      CardioType* value) {
    return Machine_CardioType_Parse(name, value);
  }

  typedef Machine_WeightType WeightType;
  static const WeightType BENCHPRESS = Machine_WeightType_BENCHPRESS;
  static const WeightType PREACHERCURL = Machine_WeightType_PREACHERCURL;
  static const WeightType LEGPRESS = Machine_WeightType_LEGPRESS;
  static inline bool WeightType_IsValid(int value) {
    return Machine_WeightType_IsValid(value);
  }
  static const WeightType WeightType_MIN =
    Machine_WeightType_WeightType_MIN;
  static const WeightType WeightType_MAX =
    Machine_WeightType_WeightType_MAX;
  static const int WeightType_ARRAYSIZE =
    Machine_WeightType_WeightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WeightType_descriptor() {
    return Machine_WeightType_descriptor();
  }
  static inline const ::std::string& WeightType_Name(WeightType value) {
    return Machine_WeightType_Name(value);
  }
  static inline bool WeightType_Parse(const ::std::string& name,
      WeightType* value) {
    return Machine_WeightType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .proto.Machine.CardioType cType = 3;
  inline bool has_ctype() const;
  inline void clear_ctype();
  static const int kCTypeFieldNumber = 3;
  inline ::proto::Machine_CardioType ctype() const;
  inline void set_ctype(::proto::Machine_CardioType value);

  // optional .proto.Machine.WeightType wType = 4;
  inline bool has_wtype() const;
  inline void clear_wtype();
  static const int kWTypeFieldNumber = 4;
  inline ::proto::Machine_WeightType wtype() const;
  inline void set_wtype(::proto::Machine_WeightType value);

  inline TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:proto.Machine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ctype();
  inline void set_has_wtype();

  inline bool has_type();
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  union TypeUnion {
    int ctype_;
    int wtype_;
  } type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MachineList_2eproto();
  friend void protobuf_AssignDesc_MachineList_2eproto();
  friend void protobuf_ShutdownFile_MachineList_2eproto();

  void InitAsDefaultInstance();
  static Machine* default_instance_;
};
// -------------------------------------------------------------------

class MachineList : public ::google::protobuf::Message {
 public:
  MachineList();
  virtual ~MachineList();

  MachineList(const MachineList& from);

  inline MachineList& operator=(const MachineList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineList& default_instance();

  void Swap(MachineList* other);

  // implements Message ----------------------------------------------

  MachineList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineList& from);
  void MergeFrom(const MachineList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Machine machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::proto::Machine& machines(int index) const;
  inline ::proto::Machine* mutable_machines(int index);
  inline ::proto::Machine* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::Machine >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::Machine >*
      mutable_machines();

  // @@protoc_insertion_point(class_scope:proto.MachineList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::Machine > machines_;
  friend void  protobuf_AddDesc_MachineList_2eproto();
  friend void protobuf_AssignDesc_MachineList_2eproto();
  friend void protobuf_ShutdownFile_MachineList_2eproto();

  void InitAsDefaultInstance();
  static MachineList* default_instance_;
};
// ===================================================================


// ===================================================================

// Machine

// required int32 id = 1;
inline bool Machine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Machine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Machine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Machine::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Machine::id() const {
  // @@protoc_insertion_point(field_get:proto.Machine.id)
  return id_;
}
inline void Machine::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Machine.id)
}

// required string name = 2;
inline bool Machine::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Machine::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Machine::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Machine::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Machine::name() const {
  // @@protoc_insertion_point(field_get:proto.Machine.name)
  return *name_;
}
inline void Machine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:proto.Machine.name)
}
inline void Machine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Machine.name)
}
inline void Machine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Machine.name)
}
inline ::std::string* Machine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.Machine.name)
  return name_;
}
inline ::std::string* Machine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Machine::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Machine.name)
}

// optional .proto.Machine.CardioType cType = 3;
inline bool Machine::has_ctype() const {
  return type_case() == kCType;
}
inline void Machine::set_has_ctype() {
  _oneof_case_[0] = kCType;
}
inline void Machine::clear_ctype() {
  if (has_ctype()) {
    type_.ctype_ = 1;
    clear_has_type();
  }
}
inline ::proto::Machine_CardioType Machine::ctype() const {
  if (has_ctype()) {
    return static_cast< ::proto::Machine_CardioType >(type_.ctype_);
  }
  return static_cast< ::proto::Machine_CardioType >(1);
}
inline void Machine::set_ctype(::proto::Machine_CardioType value) {
  assert(::proto::Machine_CardioType_IsValid(value));
  if (!has_ctype()) {
    clear_type();
    set_has_ctype();
  }
  type_.ctype_ = value;
}

// optional .proto.Machine.WeightType wType = 4;
inline bool Machine::has_wtype() const {
  return type_case() == kWType;
}
inline void Machine::set_has_wtype() {
  _oneof_case_[0] = kWType;
}
inline void Machine::clear_wtype() {
  if (has_wtype()) {
    type_.wtype_ = 1;
    clear_has_type();
  }
}
inline ::proto::Machine_WeightType Machine::wtype() const {
  if (has_wtype()) {
    return static_cast< ::proto::Machine_WeightType >(type_.wtype_);
  }
  return static_cast< ::proto::Machine_WeightType >(1);
}
inline void Machine::set_wtype(::proto::Machine_WeightType value) {
  assert(::proto::Machine_WeightType_IsValid(value));
  if (!has_wtype()) {
    clear_type();
    set_has_wtype();
  }
  type_.wtype_ = value;
}

inline bool Machine::has_type() {
  return type_case() != TYPE_NOT_SET;
}
inline void Machine::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Machine::TypeCase Machine::type_case() const {
  return Machine::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MachineList

// repeated .proto.Machine machines = 1;
inline int MachineList::machines_size() const {
  return machines_.size();
}
inline void MachineList::clear_machines() {
  machines_.Clear();
}
inline const ::proto::Machine& MachineList::machines(int index) const {
  // @@protoc_insertion_point(field_get:proto.MachineList.machines)
  return machines_.Get(index);
}
inline ::proto::Machine* MachineList::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MachineList.machines)
  return machines_.Mutable(index);
}
inline ::proto::Machine* MachineList::add_machines() {
  // @@protoc_insertion_point(field_add:proto.MachineList.machines)
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Machine >&
MachineList::machines() const {
  // @@protoc_insertion_point(field_list:proto.MachineList.machines)
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Machine >*
MachineList::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:proto.MachineList.machines)
  return &machines_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::Machine_CardioType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Machine_CardioType>() {
  return ::proto::Machine_CardioType_descriptor();
}
template <> struct is_proto_enum< ::proto::Machine_WeightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Machine_WeightType>() {
  return ::proto::Machine_WeightType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MachineList_2eproto__INCLUDED
